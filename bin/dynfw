#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, time, subprocess
from DNF.auth.df_auth import Auth
from DNF.auth.drop import Drop
from DNF.auth.login import Login
from DNF import conf
from DNF.stats.con_status import Con
from DNF.stats.df_user_stats import Statistics as stats
from DNF.database.df_data import Data
from DNF.firewall.firewall import Firewall
from DNF.firewall.limiter import limit

def main():
    """
    Gets input an checks it
    """
    
    
    if len(sys.argv) < 2:
        show_help()
        exit(0)

    program = sys.argv[1].upper()

    try:
        if(program == "DROP" and len(sys.argv) == 3) and sys.argv[2].split(".") == 4:
            drop = Drop()
            drop.ip4(sys.argv[2])
        elif program =="DROP" and len(sys.argv) == 3 and sys.argv[2].upper() == "ALL":
        	print drop_all()
        elif(program == "LOGIN" and len(sys.argv) >= 5):
            user_login()
        elif(program == "INFO" and len(sys.argv) == 3):
            user_info(sys.argv[2])	   	
    	elif program == "UPDATE" and len(sys.argv) == 2:
    		print update_stats()
    	elif program == "FLUSH" and len(sys.argv) == 3 and sys.argv[2].upper() == "LIMITED":
    		print rm_all_limit()
	elif program == "RELOAD" and len(sys.argv) == 2:
		print reload()
    	elif program == "LIMIT" and len(sys.argv) == 2:
    		print auto_limit_users()
    	elif program == "LIMIT" and len(sys.argv) == 5 and sys.argv[2].upper() == "SET":
    		print set_limit(sys.argv[3],sys.argv[4])
    	elif program == "LIMIT" and len(sys.argv) == 3 and sys.argv[2].upper() == "AUTO":
    		print auto_set_limit()
    	elif program == "LIMIT" and len(sys.argv) == 4 and sys.argv[2].upper() == "RM" and sys.argv[3].split(".") == 4:
    		print rm_limit(sys.argv[3])
        elif program =="TESTLOGIN" and len(sys.argv) == 4:
            	print test_login()
        else:
            show_help()   
    except ValueError:
        print "Plunder og heft."
        show_help()
        
def user_login():
    login = Login()
    pwd = sys.argv[4]
    plist = sys.argv[5:]
    for l in plist:
        pwd = pwd + " " + l
    login.cli_login(sys.argv[3],pwd,sys.argv[2])
    
def drop_all():
    clients = Data().get_all_active_clients()
    words =""
    if clients:
    	for client in clients:
    		Drop().ip4(client[2])
    		words += client[2]+", "
    return "Droped: "+words

def reload():
    
    int = conf.internal_interface
    ext = conf.external_interface
    network = conf.internal_network.split("/")
    command = ("/bin/bash /opt/DF/iptables.sh %s %s %s %s %s") %(ext,int,network[0],"/"+network[1],"Y")
    subprocess.call(command, shell=True)
    
    return
def update_stats():
    """
    This finds every client that is active and updates stats like, tx,rx and connections
    """
    clients = Data().get_all_active_clients()
    for client in clients:
        user = client[0]
        ip4 = client[2]
        connections = stats().get_active_connections(ip4)
        io = stats().get_iptables_io(ip4)
        tx = io['bytes_sent']
        rx = io['bytes_received']
        Data().update_stats(user,connections,tx,rx)

    Data().update_io(stats().get_all_io([x[2] for x in clients]))
    return "stats updated"

def rm_all_limit():
    """
    simply flushes the LIMITED rule in iptables, makes all that are limited to not beeing limited.
    """
    Firewall().rm_all_limit()
    return "flushed LIMITED"

def rm_limit(ip):
    """
    removes one limit
    """
    Firewall().rm_limit(ip)
    return ip+" no longer limited"

def auto_limit_users():
    """
    this method checks if there are an noticed increase in latency. 
    if it is. it will check if there are any clients that are above the limits
    and limit them in where they are above.
    """
    lim = limit_per_user()
    returning = " "
    if not Con().is_hig_latency():
        return "there is no increased latency"
    else:
        down_clients = Data().above_down_limit(int(lim['rxpu']))
	for client in down_clients:
            user = client[0]
	    ip4 = client[1]
	    Firewall().limit_rx(ip4)
	    print ip4
	    returning += "RXLIMIT " + user + " ;"
	
	upl_clients = Data().above_up_limit(int(lim['txpu']))
	for client in upl_clients:
            user = client[0]
            ip4 = client[1]
            Firewall().limit_tx(ip4)
	    returning += "TXLIMIT " + user + " ;"

	conn_clients = Data().above_connection_limit(int(lim['mcpu']))
	for client in conn_clients:
            user = client[0]
            ip4 = client[1]
            Firewall().limit_connections(ip4)
	    returning += "CONNLIMIT " + user + " ;"

    return returning

def limit_ip(what, ip4):
    """
    forces an limit to a spesific IP4 address
    """

    if what == "CONNLIMIT":
	Firewall().limit_connections(ip4)
    elif what == "RXLIMIT":
	Firewall().limit_rx(ip4)
    elif what == "TXLIMIT":
 	Firewall().limit_tx(ip4)
    return what+" "+ip4

def auto_set_limit():
    """
    This autosets how mutch linux trafic controll will limit 
    the limit is bassed on the connection speed, number of clients and the ofsett
    """
    lim = limit_per_user()
    tx_count = len(Data().above_up_limit(lim['txpu']))
    if tx_count >= 0:
	tx_count = 1
    rx_count = len(Data().above_down_limit(lim['rxpu']))
    if rx_count >= 0: 
	rx_count = 1

    tx = int(tx_count*lim['txpu'])
    rx = int(rx_count*lim['rxpu'])
    limit().activate_limit(str(tx)+"bps",str(rx)+"bps") # (1mbit,1mbit)(100kbit,100kbit)
    return "txlimit is now "+str(tx/1000)+"kbps. and rxlimit is "+str(tx/1000)+"kbps. if user is above "+str(lim['txpu'])+" / "+str(lim['rxpu'])

def set_limit(tx,rx):
	"""
	manualy set the max bandiwth for the limited users
	"""
	limit().activate_limit(tx,rx)
	return
def get_multiplication():
	"""
	
	"""
        unit = conf.bandwidth().unit
        if unit is "k":
                return 1000
        elif unit is "m":
                return 1000000
	else:
		return 1


def limit_per_user(): 
    """
    calculates the limit per user, bassed on bandiwdth offsett and number of active users
    """
    userCount = len(info_get_active_users())
    rx = conf.bandwidth().max_rxs
    tx = conf.bandwidth().max_txs
    MC = conf.bandwidth().max_connections
    offset = conf.bandwidth().limit_offsett
    rxpu = int(rx/userCount*get_multiplication()*offset)
    txpu = int(tx/userCount*get_multiplication()*offset)
    mcpu = MC/userCount
    return {'rxpu':rxpu, 'txpu':txpu, 'mcpu':mcpu}

def info_get_active_users():
    """
    returns all active clients
    """
    return Data().get_all_active_clients()

def user_info(search):
    """
    gives info about a client
    """
    client = ""
    if not len(search.split(".")) == 4:
    	for cli in Data().get_all_active_clients():
    		if cli[0] == search:
    			client = cli
    	
    elif len(search.split(".")) == 4: client = Data().get_ip4(search)
    if client:
    	user = client[0]
	stats = Data().get_stats(user)
	limited = Data().get_limited(user)
	print "info on "+search
	print " "
    	print "User:%s Mac:%s IP4:%s IP6:%s Active:%i" % (client[0],client[1],client[2],client[3],client[4])
	if stats:
	    print "connections:%i txt:%i rxt:%i txs:%i rxs:%i" % (stats[1],stats[2],stats[3],stats[4],stats[5])
	if limited:
 	    print "limited: connlimit=%i RXLIMIT=%i TXLIMIT=%i" % (limited[1],limited[2],limited[3])
	    print " "
    else:
	print "found nuthing"

def test_login():
    """
    simple test if the user should or should not work
    """
    a = Auth()
    a.set_user(str(sys.argv[2]))
    a.set_password(str(sys.argv[3]))
    result = a.login()
    print "Login for %s returned %s" % (a.username, result)
#    return(result, a.username, a.password)
    
def show_help():
    print """Dynamic Firewall v0.1
by Svein Ove Undal and Espen Gj√¶rde
source available at http://github.com/sveinou/DF/
    
Syntax:
    DROP <ipv4-addr> | DROP ALL
    LOGIN <ipaddress> <user> <password>
    TESTLOGIN <user> <password>
    INFO <IP4>|<user> (returns info about the client)
    UPDATE (updates stats to database)
    FLUSH LIMITED|ALLOWED (flush iptables rules, allowed not impl.)
    LIMIT CONNLIMIT|RX|TX <ipv4-addr> (limits one spesific ip)
    LIMIT AUTO (auto set to avg limits bassed on users)
    LIMIT ( finds and set the allowed bandwith for limited users )
    RELOAD (restarts dhcp, sets ip, reset iptables)
    
    """

if __name__ == '__main__':
    main()
