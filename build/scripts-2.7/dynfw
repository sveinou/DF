#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, time, subprocess
from DNF.auth.df_auth import Auth
from DNF.auth.drop import Drop
from DNF.auth.login import Login
from DNF import conf
from DNF.stats.con_status import Con
from DNF.stats.df_user_stats import Statistics as stats
from DNF.database.df_data import Data
from DNF.firewall.df_firewall import Firewall
from DNF.firewall.limiter import limit

def main():
    """
    Gets input an checks it
    """
    
    
    if len(sys.argv) < 2:
        show_help()
        exit(0)

    program = sys.argv[1].upper()

    try:
        if(program == "DROP" and len(sys.argv) == 3):
            drop = Drop()
            drop.ip4(sys.argv[2])
        elif(program == "LOGIN" and len(sys.argv) >= 5):
            login = Login()
            pwd = sys.argv[4]
            plist = sys.argv[5:]
            for l in plist:
                pwd = pwd + " " + l
            login.ip4(sys.argv[3],pwd,sys.argv[2])
        elif(program == "INFO" and len(sys.argv) == 4):     #username entered
            user_info(sys.argv[3], sys.argv[2])
        elif(program == "INFO" and len(sys.argv) == 5 and sys.argv[3].upper() == "IP"):     #IP keyword
            ip_info(sys.argv[2], sys.argv[4])
	elif program == "UPDATE" and len(sys.argv) == 2:
		update_stats()
	elif program == "FLUSH" and len(sys.argv) == 3 and sys.argv[2].upper() == "LIMITED":
		rm_all_limit()
	elif program == "LIMIT" and len(sys.argv) == 2:
		limit()
	elif program == "LIMIT" and len(sys.argv) == 5 and sys.argv[2].upper() == "SET":
		set_limit(sys.argv[3],sys.argv[4])
        else:
            show_help()
    except ValueError:
        print "Plunder og heft."
        show_help()


def ip_info(request, ipaddr):
    ip = IP()
    request = request.upper()
    if request == "STATUS":
        if ip.isLoggedIn(ipaddr):
            print "ACTIVE"
            return
        print "INACTIVE"
    elif request == "STATS":
        print ip.getStats(ipaddr)
    else:
        show_help()
    return

def update_stats():
    clients = Data().get_all_active_clients()
    for client in clients:
        user = client[0]
        ip4 = client[2]
        connections = stats().get_active_connections(ip4)
        io = stats().get_iptables_io(ip4)
        tx = io['bytes_sent']
        rx = io['bytes_received']
        Data().updateStats(user,connections,tx,rx)
    return

def rm_all_limit():
    Firewall().rm_all_limit()
    return

def limit():
    if not Con().is_hig_latency():
        return
    else:
        down_clients = Data().aboveDownLimit(conf.bandwidth().rx_max_user)
	for client in down_clients:
            user = client[0]
	    ip4 = client[1]
	    print ip4+" "+user
	    Firewall().limit_rx(ip4)
	
	upl_clients = Data().aboveUpLimit(conf.bandwidth().tx_max_user)
	for client in upl_clients:
            user = client[0]
            ip4 = client[1]
            Firewall().limit_tx(ip4)

	conn_clients = Data().aboveConnectionLimit(conf.bandwidth().max_connections_user)
	for client in conn_clients:
            user = client[0]
            ip4 = client[1]
            Firewall().limit_connections(ip4)


    return

def set_limit():
    
    limit().activate_limit(limit_per_user()['txpu'],limit_per_user()['rxpu']) # (1mbit,1mbit)(100kbit,100kbit)
    return

def limit_per_user(): 
    userCount = len(info_get_active_users())
    rx = conf.bandwidth().rx_limit_hard
    tx = conf.bandwidth().tx_limit_hard
    MC = conf.bandwidth().mac_connections
    rxpu = rx/userCount
    txpu = tx/userCount
    mcpu = MC/userCount	
    return {'rxpu':rxpu, 'txpu':txpu, 'mcpu':txpu}

def info_get_active_users():
    return Data().get_all_active_clients()

def user_info(request, username):
    pass;

def show_help():
    print """Dynamic Firewall v0.1
by Svein Ove Undal and Espen Gj√¶rde
source available at http://github.com/sveinou/DF/
    
Syntax:
    DROP <ipv4-addr>
    LOGIN <ipaddress> <user> <password>
    INFO STATUS|STATS <IP [ipaddress]|user> (user not impl.)
    UPDATE (updates stats to database)
    FLUSH LIMITED|ALLOWED (flush iptables rules, allowed not impl.)
    LIMIT (limits users if it is needed)
    LIMIT SET tx rx (LIMIT SET 1mbit 1mbit || LIMIT SET) 
    """

if __name__ == '__main__':
    main()
